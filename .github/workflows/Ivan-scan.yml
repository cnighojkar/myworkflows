name: Docker Image scan using Ivan workflow

on:
  workflow_call:
    inputs:   
      version:
        type: string
        default: '0.3.0'
      app-name:
        type: string
jobs:
  Ivan-scan:
    runs-on: ubuntu-latest
    steps:
    
    - name: Set Image tag
      id: set-image-tag
      run: echo "::set-output name=image_tag::$(echo ${GITHUB_SHA} | cut -c1-7)"

    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven

    # - name: Build with Maven
    #   shell: bash
    #   run: |
    #     mvn -B package --file pom.xml
    #     cp target/${{inputs.app-name}}.jar docker/

    # - name: Build Docker Image with latest tag
    #   uses: docker/build-push-action@v3
    #   with:
    #     context: docker/
    #     load: true
    #     push: false
    #     tags: myapp:latest
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: pull image from Docker HUb
      shell: bash
      env:
        DOCKER_REGISTRY: chetann
        DOCKER_REPOSITORY: javulna
        IMAGE_TAG: ${{ steps.set-image-tag.outputs.image_tag }}
      run: |
          docker pull $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG

    - name: Run ivan Docker Image CVE Scan (CrowdStrike)
      shell: bash
      run: |
        curl --location --silent https://github.com/CrowdStrike/ivan/releases/download/${{ inputs.version }}/ivan_${{ inputs.version }}_Linux_x86_64.tar.gz | tar xvzf -
        ./ivan -region us-2 -image chetann/javulna:${{inputs.short-sha}} > Docker_image_CVE.json
      env:
        FALCON_CLIENT_ID: ${{ secrets.FALCON_IVAN_CLIENT_ID }}
        FALCON_CLIENT_SECRET: ${{ secrets.FALCON_IVAN_CLIENT_SECRET }}
    
    - name: Publishing result on Build & Test summary Section
      shell: bash
      run: | 
        echo Found `cat Docker_image_CVE.json | jq '[.vulnerabilities[] | select(.Severity | contains("CRITICAL"))] | length'` CRITICAL CVEs >> $GITHUB_STEP_SUMMARY
        echo Found `cat Docker_image_CVE.json | jq '[.vulnerabilities[] | select(.Severity | contains("HIGH"))] | length'` HIGH CVEs >> $GITHUB_STEP_SUMMARY
        echo "Download the Artifact Docker-image-CVE to see more details" >> $GITHUB_STEP_SUMMARY

    - name: Archive as artifact
      uses: actions/upload-artifact@v3
      with:
        name: Docker-image-CVE
        path: ${{ github.workspace }}/Docker_image_CVE.json